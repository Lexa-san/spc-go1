package main // говорю, что это пакет main, в нем определена функция main
import (
	"Lec22/rectangle" //Прописываем путь до пакета rectangle
	"fmt"
)

//0. Разделяющая область видимости уровня одного пакета
//1. В этом примере 2 модуля (main и calculator) помещены в одну директорию Lec22
//2. Говорят, что модули main и calculator находятся в одном пакете (в одной директории)

//3. Разделяющая область видимости
// Все, что в принципе находится внутри данного паета - доступно из любого модуля без импортирования.

func main() {
	//Данные фукнции видны компилятору засчет того, что они реализованы
	//внутри модуля calculator КОТОРЫЙ ВХОДИТ В СОСТАВ ПАКЕТА MAIN!
	// resAdd := add(10, 20) //в этой ситуации лишние импортирования не нужны!
	// resSub := Sub(30, 40)
	// resMult := Mult(50, 4)
	// resDiv := Div(40, 4)

	// fmt.Println(resAdd, resSub, resMult, resDiv)
	//4. Для того, чтобы запустить все файлы в пакете надо выполнить:
	//* go run main.go calculator.go
	//* go build main.go calculator.go
	//* go install main.go calculator.go

	//5. Вы обратили внимание, что функции , которые затаскиваются в main -
	// начинаются с Большой Буквы.
	// В Go принято - если имя сущности (переменная, функция, поле в структуре, структура, метод интерфейс и т.д.)
	// начинается с Большой Буквы - данную сущность можно экспортировать (она передаваема в другие модули и пакеты)
	// если же имя сущности начинается с маленькой - данная сущность - неэкспортируемая (нельзя передавать за пределы данного ПАКЕТА!)

	//6. Создадим теперь дополнительный пакет с прямоугольником
	//mkdir rectangle && cd rectangle &&touch rectangle.go

	//7. Проставим альтернативные пути
	// Альтернативный путь определяет точку входа ВО ВСЕ ПРИЛОЖЕНИЕ!
	//Для того, чтобы его создать необходимо инициализировать файл GO.MOD
	//Данный файл будет отправной точкой для импортирования ВСЕХ ПАКЕТ ВНУТРИ ПРОЕКТА
	//go mod init <ProjectDirName>

	//Lec22/rectangle
	// Реализуем внутри rectangle структуру, метод и конструктор
	//8. Попробуем импортировать все из пакета rectangle

	r := rectangle.New(10, 20, "green")
	fmt.Println("Perimeter:", r.Perimeter())

	//9. Экспоритруемость как инкапсуляция
	newR := rectangle.Rectangle{
		A: 10,
		B: 7,
	}
	fmt.Println(newR)

	//10. Если уже создан файл go.mod
	// То сборка облегчается
	//go build (компилятор заглядывает в go.mod файл. Видит отправную точку)
	//go install

	//11. ВСЕГДА ИСПОЛЬЗУЙТЕ GO.MOD ПРИ ИНИЦИАЛИЗАЦИИ ВАШЕГО ПРОЕКТА!

}
