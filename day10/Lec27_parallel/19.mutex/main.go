package main

//1. Мьютексы - средства защиты от "Resource Sharing"
// Что это такое?
// Во время работы конкурентных программ, главной точкой является тот факт, что множества горутин
// не должны одновременно использовать какой-то общий экземпляр (файл, переменную, бд) для одновременных модификаций.

// 2. Пример RS
// Допустим у нас код
//     x = x + 1
// Пока работает 1 горутина - проблем никаких нет и иннкремент стандартный
// Теперь представим что горутин 2
// ПОСКЛЬКУ ДЛЯ ОБЕИХ ГОРУТИН ДАННЫЙ РЕСУРС БУДЕТ ИСПОЛЬЗОВАТЬСЯ КОНКУРЕТНО, ОЖИДАТЬ ЧТО ПО ИТОГУ РАБОТУ ОБЕИХ ГОРУТИН
// (При начальном X=0) X будет равен 2 - НЕЛЬЗЯ.
//*  Первая и вторая горутина могут начать работать с парметром x =0 (вторая не дождется , пока первая увеличит X на единицу)
// * В итоге будет X = 1
//* Первая горутина начнает работать, увеличивает x на единицу , но не успевает присвоить его
//* Первая горутина начинает работать, завершается, потом стартуер вторая (этот вариант оптимистичный, но сработает с вероятность 1/3!)

// Для того, чтобы избежать этой пробелмы использую мьютексы (мьютекс блокирует ресурс до тех пор , пока его не осводит одна из горутин)
// В таком случае код с инкрементом выглядел бы как :
// mutex.Lock()
// x = x + 1
// mutex.Unlock()

import (
	"fmt"
	"sync"
)

// 2. Пример. Возникновение RS часто именую как Race Condition (состояние гонки)

var x = 0

func increment(wg *sync.WaitGroup) {
	x = x + 1
	wg.Done()
}
func main() {
	var w sync.WaitGroup
	for i := 0; i < 1000; i++ {
		w.Add(1)
		go increment(&w)
	}
	w.Wait()
	fmt.Println("final value of x", x)
}
